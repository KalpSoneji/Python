there are 5 data types in python:
1. Integers
2. float
3. boolean
4. nonetype
5. string

there are 3 conditional statements in python:
1. if
2. elif
3. else

it has match case instead of switch case

it has a for loop and a while loop

for i in range(start, end, increment/decrement):    
    # code to be executed

to iterate through whole variable, for i in range(len(variable)): 
to iterate through whole variable reversed, for i in range(len(variable) - 1, -1, -1): 

for i in variable:
    # code to be executed

there are 3 types of operators:

1. unary (not present in python)
2. binary
3. ternary

there are 7 types of operators in python:

1. arithmetic: + - * / % // **
2. comparison: < > <= >= == !=
3. logical: and or not
4. assignment: += -= *= /= %= //= **=
5. bitwise: & | ^ ~ << >>
6. membership: in not in
7. identity: is is not

strings are immutable, no operation can be performed once it is declared

len(variable)

variable.upper() converts to uppercase
variable.lower() converts to lowercase
variable.title() makes every word's 1st character uppercase
variable.capitalize() makes 1st character of string uppercase
variable.swapcase() swaps case of string's each character

variable.lstrip() removes whitespaces from left side of the string
variable.rstrip() removes whitespaces from right side of the string
variable.strip() removes whitespaces from both sides of the string

variable.startswith() checks if string starts with a certain word
variable.endswith() checks if string ends with a certain word

variable.find() finds the index of a certain word in the string
variable.replace() replaces a certain word with another word
variable.split() splits the string into a list of words
variable.join() joins a list of words into a string
variable.count() counts the number of times a certain word appears in the string

variable.isalnum() checks if string contains only alphanumeric characters
variable.isalpha() checks if string contains only alphabetic characters
variable.isdigit() checks if string contains only digits

variable.islower() checks if string contains only lowercase characters
variable.isupper() checks if string contains only uppercase characters

variable.isspace() checks if string contains only whitespace characters

variable.istitle() checks if string contains only title case characters

variable.isprintable() checks if string contains only printable characters

there are 4 types of data structures in python:
1. lists
2. tuples
3. sets
4. dictionaries

lists:


data type of list is list. CSV between square brackets.
syntax: variable = [value1, value2, value3, ...]

features:

1. dynamic
2. heterogeneous
3. ordered
4. mutable
5. indexed
6. allows duplicate elements
7. iterable
8. subscriptable

list.append(value) adds value at the end of the list
list.insert(index, value) adds value at the specified index and pushes the other values forward
list.extend(list/string) adds all elements of the list to the current list, (takes any argument that is iterable)

list.pop() removes the last element from the list
list.pop(index) removes the element at the specified index
list.remove(value) removes the first occurrence of value

list.reverse() reverses the list
list.count(value) returns the number of occurrences of value
list.index(value) returns the index of the first occurrence of value
list.copy() returns a copy of the list

list.sort() sorts the list in ascending order
list.sort(key=len) sorts the list based on the length of the elements
list.sort(reverse=True) sorts the list in descending order
list.sort(key=len, reverse=True) sorts the list based on the length of the elements in descending order

list.clear() removes all elements from the list

there are nested lists data = [[1,'a'] [2, 'b']]

list can be comprehended into a single line

data2 = [i**3 for i in data if i % 2 == 0]  #for if

data4 = ["+ve" if i > 0 else "-ve" for i in data] #for if, else

print can be written in a different way

print(f"My name is" {fname} {lname})

Tuple:

almost same features as list

Features:

1. immutable
2. faster and takes less memory
3. less features than lists

2 methods

1. count
2. index

Dictionary:

Mutable, iterable, subscriptable

Methods:

1. dict.keys() used for getting keys
2. dict.values() used for getting values
3. dict.items() used for getting key value pairs, returns multiple tuples within a list
4. dict.update({"key": "value", "key" :"value"}) used for updating the dictionary with multiple values
5. dict.pop(key) removes the key value pair from the dictionary, returns the value
6. dict.popitem() removes last pair from dictionary, 

for single append, dict_name[key] = value

Set:

data type = set

Features:

1. Unordered
2. mutable
3. no duplicate values

Methods:

1. add() adds a value to the set
2. update() adds multiple values to the set, takes an iterable input
3. remove(value) removes a value from the set
4. pop() removes a random value from the set
5. discard(value) removes a value from the set, does not raise an error if the value is not present
6. clear() removes all values from the set

7. union() returns a new set with all elements from both sets, we can use | instead
8. intersection() returns a new set with elements common to both sets, we can use & instead
9. difference() returns a new set with elements in set1 but not in set2, we can use - instead
10. discard() removes a value from the set if it exists
11. len() returns the number of elements in the set
12. set() returns a new set with all elements from the set
13. isdisjoint() returns True if set1 and set2 have no elements in common
14. issuperset() returns True if set1 has all elements of set2
15. issubset() returns True if set1 is a subset of set2
16. copy() returns a copy of the set
17. frozen set is an immutable set
18. set comprehension is used to create a set from a list

Functions:

There are 2 types of functions:
1. user - defined functions
2. built-in functions

4 types of user - defined functions:

1. no arg no return type
2. no arg with return type
3. with arg no return type
4. with arg with return type

Syntax:

def fnc_name(args):
    code
    return value

*args

**kwargs